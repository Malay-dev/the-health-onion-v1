// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  doctorVerified   Boolean?       @default(false)
  hashedPassword   String?
  createdCommunity Community[]    @relation("CreatedBy")
  subscriptions    Subscription[]
  votes            Vote[]
  image            String?
  accounts         Account[]
  posts            Post[]
  comments         Comment[]
  commentVotes     CommentVote[]
}

model Community {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  description String?
  posts       Post[]

  creatorId   String?        @db.ObjectId
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
}

model Subscription {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId

  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentVotes CommentVote[]
  commentId    String?
}

model Vote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String   @db.ObjectId
  type   VoteType
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String   @db.ObjectId
  type      VoteType
}
